package server

import (
	"github.com/stretchr/testify/assert"
	"gitlab.s.upyun.com/platform/tikv-proxy/xerror"
	"testing"
)

var checkTestCases = []struct {
	Name   string
	Old    []byte
	New    []byte
	Exist  []byte
	Output []byte
	Err    error
}{
	{"same_updated_at_1",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		[]byte(`{"updated_at": 100, "exist": true}`),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"same_updated_at_2",
		[]byte(`{"updated_at": 99, "old": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		[]byte(`{"updated_at": 99, "exist": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		nil,
	},
	{"same_updated_at_2_failed",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 99, "new": true}`),
		[]byte(`{"updated_at": 100, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"same_updated_at_3",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		[]byte(`{"updated_at": 99, "exist": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		nil,
	},
	{"same_updated_at_3_failed",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "new": true}`),
		[]byte(`{"updated_at": 101, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_1",
		[]byte(`{"updated_at": 1, "old": true}`),
		[]byte(`{"updated_at": 2, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger exist 2",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_3",
		[]byte(`{"updated_at": 2, "old": true}`),
		[]byte(`{"updated_at": 3, "create_at": 1, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_4",
		[]byte(`{"updated_at": 2, "old": true}`),
		[]byte(`{"updated_at": 3, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"bigger_old_0",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "new": true}`),
		[]byte(`{"updated_at": 2, "exist": true}`),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"bigger_old_1",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "create_at": 1, "new": true}`),
		[]byte(`{"updated_at": 2, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_old_2",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 3, "new": true}`),
		[]byte(`{"updated_at": 2, "exist": true}`),
		[]byte(`{"updated_at": 3, "new": true}`),
		nil,
	},
	{"bigger_old_3",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_new_1",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
	},
	{"bigger_new_2",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
	},
	{"bigger_new_3",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"bigger_new_4",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 4, "create_at": 1, "new": true}`),
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_new_1",
		[]byte(`{"updated_at": 3, "old": true}`),
		nil,
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		nil,
	},
	{"not_exist_new_2",
		[]byte(`{"updated_at": 2, "old": true}`),
		nil,
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_new_3",
		[]byte(`{"updated_at": 4, "old": true}`),
		nil,
		[]byte(`{"updated_at": 2, "exist": true}`),
		nil,
		nil,
	},
	{"not_exist_old_0",
		nil,
		[]byte(`{"updated_at": 3, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"not_exist_old_1",
		nil,
		[]byte(`{"updated_at": 3, "create_at": 1, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_old_2",
		nil,
		[]byte(`{"updated_at": 3, "new": true}`),
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_old_3",
		nil,
		[]byte(`{"updated_at": 4, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_1",
		[]byte(`{"updated_at": 5, "old": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_2",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
	},
	{"not_exist_3",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 5, "new": true}`),
		nil,
		[]byte(`{"updated_at": 5, "new": true}`),
		nil,
	},
	{"not_exist_4",
		nil,
		nil,
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_5",
		[]byte(`{"updated_at": 4, "old": true}`),
		nil,
		nil,
		nil,
		xerror.ErrAlreadyExists,
	},
	{"not_exist_6",
		nil,
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
		[]byte(`{"updated_at": 4, "new": true}`),
		nil,
	},
	{"same_updated_at_deleted_new_1",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 100, "exist": true}`),
		nil,
		nil,
	},
	{"same_updated_at_2",
		[]byte(`{"updated_at": 99, "old": true}`),
		[]byte(`{"updated_at": 100, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 99, "exist": true}`),
		nil,
		nil,
	},
	{"same_updated_at_2_failed",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 99, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 100, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"same_updated_at_3",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 99, "exist": true}`),
		nil,
		nil,
	},
	{"same_updated_at_3_failed",
		[]byte(`{"updated_at": 100, "old": true}`),
		[]byte(`{"updated_at": 100, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 101, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_deleted_new_1",
		[]byte(`{"updated_at": 1, "old": true}`),
		[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_deleted_new_2",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2,  "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_exist_deleted_new_3",
		[]byte(`{"updated_at": 2, "old": true}`),
		[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_old_deleted_new_1",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 2, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_old_deleted_new_2",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 2, "exist": true}`),
		nil,
		nil,
	},
	{"bigger_old_deleted_new_3",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"bigger_new_deleted_new_1",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		nil,
	},
	{"bigger_new_deleted_new_2",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		nil,
	},
	{"bigger_new_deleted_new_3",
		[]byte(`{"updated_at": 3, "old": true}`),
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_old_deleted_new_1",
		nil,
		[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_old_deleted_new_2",
		nil,
		[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 4, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_old_deleted_new_3",
		nil,
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		[]byte(`{"updated_at": 3, "exist": true}`),
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_deleted_new_1",
		[]byte(`{"updated_at": 5, "old": true}`),
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		nil,
		nil,
		xerror.ErrCheckAndSetFailed,
	},
	{"not_exist_deleted_new_2",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		nil,
		nil,
		nil,
	},
	{"not_exist_deleted_new_3",
		[]byte(`{"updated_at": 4, "old": true}`),
		[]byte(`{"updated_at": 5, "deleted": true, "new": true}`),
		nil,
		nil,
		nil,
	},
	{"not_exist_deleted_new_4",
		nil,
		[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
		nil,
		nil,
		nil,
	},
	{"same_check_1",
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"metadata\":{\"aaa\":\"ddd\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"new\":true, \"metadata\":{\"aaa\":\"ddd\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"metadata\":{\"aaa\":\"ddd\"}}"),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"same_check_2",
		[]byte("{\"updated_at\":1595320458}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"new\":true, \"metadata\":{\"aaa\":\"ddd\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"metadata\":{\"aaa\":\"ddd\"}}"),
		nil,
		xerror.ErrAlreadyExists,
	},
	{"same_check_3",
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"metadata\":{\"aaa\":\"ddd\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"new\":true, \"metadata\":{\"aaa\":\"ddd\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"metadata\":{\"aaa\":\"dde\"}}"),
		[]byte("{\"updated_at\":1595320458,\"cluster_id\":\"skypiea_c1\",\"created_at\":1595320458,\"block_uuid\":\"6f81b6a5-4fca-4304-b5f3-e39a694dcd0a\",\"content_md5\":\"202cb962ac59075b964b07152d234b70\",\"block_size\":1048576,\"new\":true, \"metadata\":{\"aaa\":\"ddd\"}}"),
		nil,
	},
}

func TestTimestampCheck(t *testing.T) {
	t.Parallel()

	for _, tt := range checkTestCases {
		tt := tt
		t.Run(tt.Name, func(t *testing.T) {
			t.Parallel()
			output, err := TimestampCheck(tt.Old, tt.New, tt.Exist)
			assert.Equal(t, tt.Err, err)
			assert.Equal(t, tt.Output, output)
		})
	}
}
