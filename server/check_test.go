package server

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestTimestampCheck(t *testing.T) {
	t.Parallel()
	tests := []struct {
		Name   string
		Old    []byte
		New    []byte
		Exist  []byte
		Output []byte
		OK     bool
	}{
		{"same_updated_at_1",
			[]byte(`{"updated_at": 100, "old": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			[]byte(`{"updated_at": 100, "exist": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			true,
		},
		{"same_updated_at_2",
			[]byte(`{"updated_at": 99, "old": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			[]byte(`{"updated_at": 99, "exist": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			true,
		},
		{"same_updated_at_2_failed",
			[]byte(`{"updated_at": 100, "old": true}`),
			[]byte(`{"updated_at": 99, "new": true}`),
			[]byte(`{"updated_at": 100, "exist": true}`),
			nil,
			false,
		},
		{"same_updated_at_3",
			[]byte(`{"updated_at": 100, "old": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			[]byte(`{"updated_at": 99, "exist": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			true,
		},
		{"same_updated_at_3_failed",
			[]byte(`{"updated_at": 100, "old": true}`),
			[]byte(`{"updated_at": 100, "new": true}`),
			[]byte(`{"updated_at": 101, "exist": true}`),
			nil,
			false,
		},
		{"bigger_exist_1",
			[]byte(`{"updated_at": 1, "old": true}`),
			[]byte(`{"updated_at": 2, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger exist 2",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_exist_3",
			[]byte(`{"updated_at": 2, "old": true}`),
			[]byte(`{"updated_at": 3, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_old_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2, "new": true}`),
			[]byte(`{"updated_at": 2, "exist": true}`),
			nil,
			false,
		},
		{"bigger_old_2",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 3, "new": true}`),
			[]byte(`{"updated_at": 2, "exist": true}`),
			[]byte(`{"updated_at": 3, "new": true}`),
			true,
		},
		{"bigger_old_3",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_new_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			true,
		},
		{"bigger_new_2",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			true,
		},
		{"bigger_new_3",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			[]byte(`{"updated_at": 4, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_new_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			nil,
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			true,
		},
		{"not_exist_new_2",
			[]byte(`{"updated_at": 2, "old": true}`),
			nil,
			[]byte(`{"updated_at": 4, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_new_3",
			[]byte(`{"updated_at": 4, "old": true}`),
			nil,
			[]byte(`{"updated_at": 2, "exist": true}`),
			nil,
			true,
		},
		{"not_exist_old_1",
			nil,
			[]byte(`{"updated_at": 3, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_old_2",
			nil,
			[]byte(`{"updated_at": 3, "new": true}`),
			[]byte(`{"updated_at": 4, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_old_3",
			nil,
			[]byte(`{"updated_at": 4, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			nil,
			nil,
			false,
		},
		{"not_exist_2",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 4, "new": true}`),
			nil,
			nil,
			false,
		},
		{"not_exist_3",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 5, "new": true}`),
			nil,
			nil,
			false,
		},
		{"bigger_exist_deleted_new_1",
			[]byte(`{"updated_at": 1, "old": true}`),
			[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_exist_deleted_new_2",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2,  "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_exist_deleted_new_3",
			[]byte(`{"updated_at": 2, "old": true}`),
			[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_old_deleted_new_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 2, "exist": true}`),
			nil,
			false,
		},
		{"bigger_old_deleted_new_2",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 2, "exist": true}`),
			nil,
			true,
		},
		{"bigger_old_deleted_new_3",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 2, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"bigger_new_deleted_new_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			true,
		},
		{"bigger_new_deleted_new_2",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			true,
		},
		{"bigger_new_deleted_new_3",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 4, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_old_deleted_new_1",
			nil,
			[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_old_deleted_new_2",
			nil,
			[]byte(`{"updated_at": 3, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 4, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_old_deleted_new_3",
			nil,
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			[]byte(`{"updated_at": 3, "exist": true}`),
			nil,
			false,
		},
		{"not_exist_deleted_new_1",
			[]byte(`{"updated_at": 3, "old": true}`),
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			nil,
			nil,
			false,
		},
		{"not_exist_deleted_new_2",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 4, "deleted": true, "new": true}`),
			nil,
			nil,
			false,
		},
		{"not_exist_deleted_new_3",
			[]byte(`{"updated_at": 4, "old": true}`),
			[]byte(`{"updated_at": 5, "deleted": true, "new": true}`),
			nil,
			nil,
			false,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.Name, func(t *testing.T) {
			t.Parallel()
			output, ok := TimestampCheck(tt.Old, tt.New, tt.Exist)
			assert.Equal(t, tt.OK, ok)
			assert.Equal(t, tt.Output, output)
		})
	}
}
